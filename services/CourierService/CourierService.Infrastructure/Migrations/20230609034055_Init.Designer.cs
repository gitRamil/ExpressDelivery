// <auto-generated />
using System;
using CourierService.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CourierService.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230609034055_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CourierService.Domain.Entities.Courier", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("E")
                        .HasColumnType("text")
                        .HasColumnName("e")
                        .HasComment("Координаты E");

                    b.Property<string>("S")
                        .HasColumnType("text")
                        .HasColumnName("s")
                        .HasComment("Координаты S");

                    b.Property<string>("TelegramUserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("telegram_user_name")
                        .HasComment("Ник телеграм");

                    b.Property<Guid>("user_id")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasComment("Идентификатор пользователя");

                    b.HasKey("Id")
                        .HasName("pk_couriers");

                    b.HasIndex("user_id")
                        .HasDatabaseName("ix_couriers_user_id");

                    b.ToTable("couriers", null, t =>
                        {
                            t.HasComment("Курьеры");
                        });
                });

            modelBuilder.Entity("CourierService.Domain.Entities.Dictionaries.OrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code")
                        .HasComment("Код");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.HasKey("Id")
                        .HasName("pk_order_statuses");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_order_statuses_code");

                    b.ToTable("order_statuses", null, t =>
                        {
                            t.HasComment("Статус заказа");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("4fdc6d99-f3fd-49ee-8af9-6ac5531cc40e"),
                            Code = "courier_assigned",
                            Name = "Курьер назначен"
                        },
                        new
                        {
                            Id = new Guid("b63c138c-c36b-4bb1-8dad-b3770512b858"),
                            Code = "created",
                            Name = "Заказ создан"
                        },
                        new
                        {
                            Id = new Guid("9171b0ee-7091-4dee-95aa-59c5522a21fd"),
                            Code = "done",
                            Name = "Заказ завершен"
                        },
                        new
                        {
                            Id = new Guid("32ba2971-2a5e-435b-87c7-f8022e901c63"),
                            Code = "in_progress",
                            Name = "Заказ в процессе"
                        });
                });

            modelBuilder.Entity("CourierService.Domain.Entities.Dictionaries.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code")
                        .HasComment("Код");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.HasKey("Id")
                        .HasName("pk_payment_methods");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_payment_methods_code");

                    b.ToTable("payment_methods", null, t =>
                        {
                            t.HasComment("Метод оплаты заказа");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("7373f370-6206-41c7-b4e7-91caddf1a35a"),
                            Code = "card",
                            Name = "Карта"
                        },
                        new
                        {
                            Id = new Guid("d353d9a8-b9e2-4b8e-9207-e898ef328b52"),
                            Code = "cash",
                            Name = "Наличные"
                        },
                        new
                        {
                            Id = new Guid("424b93cd-ca77-4bb5-b20b-e0f1201bc350"),
                            Code = "online",
                            Name = "Онлайн"
                        });
                });

            modelBuilder.Entity("CourierService.Domain.Entities.Dictionaries.Right", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code")
                        .HasComment("Код");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.HasKey("Id")
                        .HasName("pk_rights");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_rights_code");

                    b.ToTable("rights", null, t =>
                        {
                            t.HasComment("Права");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("3dfcd6f3-1775-4e1b-91db-fdccea3f83eb"),
                            Code = "admin",
                            Name = "Администратор"
                        },
                        new
                        {
                            Id = new Guid("60eb98f3-9f8c-4c12-93d4-66f208caa6f6"),
                            Code = "courier",
                            Name = "Курьер"
                        },
                        new
                        {
                            Id = new Guid("e10222c4-7723-498b-8bf4-83252378e0c9"),
                            Code = "user",
                            Name = "Пользователь"
                        });
                });

            modelBuilder.Entity("CourierService.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("DeliveryCost")
                        .HasColumnType("numeric")
                        .HasColumnName("delivery_cost")
                        .HasComment("Цена доставки");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivery_date")
                        .HasComment("Дата доставки");

                    b.Property<string>("ReceiverAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("receiver_address")
                        .HasComment("Адрес получателя");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("receiver_name")
                        .HasComment("Имя получателя");

                    b.Property<string>("SenderAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sender_address")
                        .HasComment("Адрес отправителя");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sender_name")
                        .HasComment("Имя отправителя");

                    b.Property<Guid>("TrackNumber")
                        .HasColumnType("uuid")
                        .HasColumnName("track_number")
                        .HasComment("Номер отслеживания");

                    b.Property<Guid?>("courier_id")
                        .HasColumnType("uuid")
                        .HasColumnName("courier_id")
                        .HasComment("Идентификатор курьера");

                    b.Property<Guid>("order_status_id")
                        .HasColumnType("uuid")
                        .HasColumnName("order_status_id")
                        .HasComment("Идентификатор статуса заказа");

                    b.Property<Guid>("package_information_id")
                        .HasColumnType("uuid")
                        .HasColumnName("package_information_id")
                        .HasComment("Идентификатор посылки");

                    b.Property<Guid>("payment_method_id")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_method_id")
                        .HasComment("Идентификатор метода оплаты");

                    b.Property<Guid?>("receiver_id")
                        .HasColumnType("uuid")
                        .HasColumnName("receiver_id")
                        .HasComment("Идентификатор получателя");

                    b.Property<Guid?>("sender_id")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id")
                        .HasComment("Идентификатор связанной цели");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("courier_id")
                        .HasDatabaseName("ix_orders_courier_id");

                    b.HasIndex("order_status_id")
                        .HasDatabaseName("ix_orders_order_status_id");

                    b.HasIndex("package_information_id")
                        .HasDatabaseName("ix_orders_package_information_id");

                    b.HasIndex("payment_method_id")
                        .HasDatabaseName("ix_orders_payment_method_id");

                    b.HasIndex("receiver_id")
                        .HasDatabaseName("ix_orders_receiver_id");

                    b.HasIndex("sender_id")
                        .HasDatabaseName("ix_orders_sender_id");

                    b.ToTable("orders", null, t =>
                        {
                            t.HasComment("Заказ");
                        });
                });

            modelBuilder.Entity("CourierService.Domain.Entities.PackageInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Cost")
                        .HasColumnType("integer")
                        .HasColumnName("cost")
                        .HasComment("Цена посылки");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("short_description")
                        .HasComment("Краткое описание");

                    b.Property<int>("Weight")
                        .HasColumnType("integer")
                        .HasColumnName("weight")
                        .HasComment("Вес посылки");

                    b.HasKey("Id")
                        .HasName("pk_package_information");

                    b.ToTable("package_information", null, t =>
                        {
                            t.HasComment("Информация о посылке");
                        });
                });

            modelBuilder.Entity("CourierService.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("first_name")
                        .HasComment("Имя");

                    b.Property<string>("LastName")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("last_name")
                        .HasComment("Логин сотрудника");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("login")
                        .HasComment("Логин сотрудника");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("mail")
                        .HasComment("Эл. почта");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash")
                        .HasComment("Хеш пароля");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_salt")
                        .HasComment("Соль пароля");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone")
                        .HasComment("Номер телефона");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("refresh_token")
                        .HasComment("Рефреш-токен");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("token_created")
                        .HasComment("Дата создания токена");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("token_expires")
                        .HasComment("Дата истечения токена");

                    b.Property<Guid>("right_id")
                        .HasColumnType("uuid")
                        .HasColumnName("right_id")
                        .HasComment("Идентификатор прав пользователя");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("right_id")
                        .HasDatabaseName("ix_users_right_id");

                    b.ToTable("users", null, t =>
                        {
                            t.HasComment("Пользователи");
                        });
                });

            modelBuilder.Entity("CourierService.Domain.Entities.Courier", b =>
                {
                    b.HasOne("CourierService.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_couriers_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CourierService.Domain.Entities.Order", b =>
                {
                    b.HasOne("CourierService.Domain.Entities.Courier", "Courier")
                        .WithMany()
                        .HasForeignKey("courier_id")
                        .HasConstraintName("fk_orders_couriers_courier_id");

                    b.HasOne("CourierService.Domain.Entities.Dictionaries.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("order_status_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_order_statuses_order_status_id");

                    b.HasOne("CourierService.Domain.Entities.PackageInformation", "PackageInformation")
                        .WithMany()
                        .HasForeignKey("package_information_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_package_information_package_information_id");

                    b.HasOne("CourierService.Domain.Entities.Dictionaries.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("payment_method_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_payment_methods_payment_method_id");

                    b.HasOne("CourierService.Domain.Entities.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("receiver_id")
                        .HasConstraintName("fk_orders_users_receiver_id");

                    b.HasOne("CourierService.Domain.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("sender_id")
                        .HasConstraintName("fk_orders_users_sender_id");

                    b.Navigation("Courier");

                    b.Navigation("OrderStatus");

                    b.Navigation("PackageInformation");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("CourierService.Domain.Entities.User", b =>
                {
                    b.HasOne("CourierService.Domain.Entities.Dictionaries.Right", "Right")
                        .WithMany()
                        .HasForeignKey("right_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_rights_right_id");

                    b.Navigation("Right");
                });
#pragma warning restore 612, 618
        }
    }
}
